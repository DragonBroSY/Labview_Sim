$GROUP "autothrottle" 
#C ****** TRA Throttle Resolver Angle FSID 4.1.1.1 ********
#C ****** TRA_Actual **************************************
#C TRA_Actual (PLA_TLA_mcoeff * PLA_Handle + PLA_TLA_bcoeff)
TRA_Actual:	TLAPriCHResolver
#C ********************************************************
#C ------------------------------------------
#C ****** ECM AutoThrottle Logic ************
#C ------------------------------------------
#C * TRA AutoThrottle Trim Increment ********
#C ------------------------------------------
#if	((TRA_SpeedCtrl_RB = 3) & ~(Trim_Inc = FastSpeed))
Trim_Inc:	FastSpeed
#elseif	((TRA_SpeedCtrl_RB = 2) & ~(Trim_Inc = MedSpeed))
Trim_Inc:	MedSpeed
#elseif	((TRA_SpeedCtrl_RB = 1) & ~(Trim_Inc = SlowSpeed))
Trim_Inc:	SlowSpeed
#elseif	((TRA_SpeedCtrl_RB = 0) & ~(Trim_Inc = FineSpeed))
Trim_Inc:	FineSpeed
#endif	
#C --------------------------------------------------------
#C * Check TRA_Actual, Are we at the Idle or Max Power Stop?
#C --------------------------------------------------------
#if	TRAMxPwrStopSet_F
TRAatMxPwrStop_F:	inrange (TRAMxPwrStopMn TRA_Actual TRAMxPwrStopMx)
#else	
TRAatMxPwrStop_F:	OFF
#endif	
#if	TRAMnIdleStopSet_F
TRAatMnIdleStop_F:	inrange (TRAMnIdleStopMn TRA_Actual TRAMnIdleStopMx)
#else	
TRAatMnIdleStop_F:	OFF
#endif	
#C TRAatMxPwrStop_F: inrange (TRAMxPwrStopMn TRA_Cmd TRAMxPwrStopMx)
#C TRAatMnIdleStop_F: inrange (TRAMnIdleStopMn TRA_Cmd TRAMnIdleStopMx)
#C TRAatMxPwrStop_F: ((TRACmdLastScan <= TRAMxPwrStop) & (TRA_Cmd >= TRAMxPwrStop))
#C TRAatMnIdleStop_F: ((TRACmdLastScan >= TRAMnIdleStop) & (TRA_Cmd <= TRAMnIdleStop))
#C --------------------------------------------------------
#if	(~TRAOverRide_F & TRAatMxPwrStop_F)
TRA_Cmd:Deg	TRAMxPwrStop
#endif	
#C --------------------------------------------------------
#C ****** Calculate/SET TRA_CMD Here **********************
#C ****** Must be before Check TRA_CMD ********************
#C --------------------------------------------------------
#if	(AutoThrottle_F & (TRAatMxPwrStop_F | TRAatMnIdleStop_F) & ~TRAOverRide_F)
AutoThrottle_F:	OFF
#elseif	(AutoThrottle_F & StageTmr_F & Accel_F)
#C ***** This is for Automated Accel/RunIn/BrkIn procedures...
TRA_Cmd:Deg	(TRAStart + (TRA_Rate * StageTmr))
#elseif	(AutoThrottle_F & StageTmr_F & Decel_F)
#C ***** This is for Automated Decel/RunIn/BrkIn procedures...
TRA_Cmd:Deg	(TRAStart - (TRA_Rate * StageTmr))
#elseif	(AutoThrottle_F & IncreaseTRA_F)
#C ***** This is for IncreaseTRA Button press...
TRA_Cmd:Deg	(TRAStart + (TRA_Rate * StageTmr))
#elseif	(AutoThrottle_F & DecreaseTRA_F)
#C ***** This is for DecreaseTRA Button press...
TRA_Cmd:Deg	(TRAStart - (TRA_Rate * StageTmr))
#endif	
#C --------------------------------------------------------
#C * Compute difference between TRA_Cmd and TRA_Actual...
#C --------------------------------------------------------
TRA_Diff:	(TRA_Cmd - TRA_Actual)
TRA_Diff:	abs(TRA_Diff)
#if	(AutoThrottle_F & (TRA_Diff > TRAOverRideLim))
#C * The Operator is overriding the autothrottle...
AutoPLEnable_O:	OFF
AutoThrottle_F:	OFF
#endif	
#C vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
#C ********************************************************
#C * Check for Operator OverRide (TRAOverRide_F),
#C * A difference of > TRAOverRideLim degrees
#C * between commanded and actual Power Lever Position...
#C ********************************************************
#if	(AutoTRequest_F & ~AutoThrottle_F)
#C * Check for an auto throttle request from autotest...
AutoTRequest_F:	OFF
#goto	CHECK_TRA_Cmd
#elseif	(AutoPL_I & ~LastAUTOPLReq & ~AutoThrottle_F)
#C * P/L toggle request just made with auto throttle not engaged...
#goto	CHECK_TRA_Cmd
#elseif	(AutoPL_I & ~LastAUTOPLReq & AutoThrottle_F)
#C * P/L toggle request just made with auto throttle engaged...
dummy:	storeevent("Test Mode Revision to Manual")
AutoPLEnable_O:	OFF
AutoThrottle_F:	OFF
AutoThrottleEngaged:	OFF
PLA_DAC_Tmr_F:	ON
DAC_PLA_Voltage:	0.0
#goto	NO_CHECK_TRA
#elseif	(~AutoPL_I & AutoThrottle_F)
OperatorOverride:	ON
#elseif	((TRA_Diff > TRAOverRideLim) & AutoThrottle_F)
OperatorOverride:	ON
#elseif	(TRAMxPwrStopSet_F & (TRA_Actual > TRAMxPwrStop) & AutoThrottle_F)
OperatorOverride:	ON
#endif	
#C ******************************************************
#C * Set the MAX/MIN/REV TRA limits if TRA Rigged...
#C ******************************************************
#if	(~(TRA_CmdMx = TLA_Takeoff) | ~(TRA_CmdMn = 0.0))
#C #if (~(TRA_CmdMx = TLA_Takeoff) | ~(TRA_CmdMn = TLA_Idle))
TRA_CmdMx:Deg	TLA_Takeoff
#C TRA_CmdMn:Deg TLA_Idle
TRA_CmdMn:Deg	0.0
TRA_CmdRev:Deg	TLA_Idle
#C TRA_CmdRev:Deg -38.0
#C dummy: setvxivalue("TRA_Unique_MAX", TRA_CmdMx, "SHMEM_arinc")
#C dummy: setvxivalue("TRA_Unique_MIN", TRA_CmdMn, "SHMEM_arinc")
#C * Turn OFF the Max/Min Stop Flags...
TRAMxPwrStop:deg	TRA_CmdMx
TRAMxPwrStopMx:deg	(TRAMxPwrStop + TRATargBand)
TRAMxPwrStopMn:deg	(TRAMxPwrStop - TRATargBand)
TRAMxPwrStopSet_F:	ON
TRAMnIdleStop:deg	TRA_CmdMn
TRAMnIdleStopMx:deg	(TRAMnIdleStop + TRATargBand)
TRAMnIdleStopMn:deg	(TRAMnIdleStop - TRATargBand)
TRAMnIdleStopSet_F:	ON
#endif	
#C ******************************************************
#C * Perform MAX limits checking for Commanded TRA...
#C ******************************************************
#if	((TRA_Cmd > TRAMxPwrStop) & AutoThrottle_F)
TRA_Cmd:Deg	TRAMxPwrStop
#elseif	((TRA_Cmd < TRAMnIdleStop) & AutoThrottle_F)
TRA_Cmd:Deg	TRAMnIdleStop
#elseif	LimitEventLogged
LimitEventLogged:	OFF
#endif	
#C ------------------------------------------------------
#if	((TRA_Cmd > TRAMxPwrStop) & ~LimitEventLogged & AutoThrottle_F)
dummy:	storeevent("TRA Upper Limit Exceeded")
LimitEventLogged:	ON
#elseif	((TRA_Cmd < TRAMnIdleStop) & ~LimitEventLogged & AutoThrottle_F)
dummy:	storeevent("TRA Lower Limit Exceeded")
LimitEventLogged:	ON
#endif	
#C ******************************************************
#C ------------------------------------------------------
#C * End of Code Checked...
#C ------------------------------------------------------
#C ******************************************************
#C * Check for an auto throttle request from autotest
#C ********************************************************
#C #if (AutoTRequest_F & ~AutoThrottle_F)
#C AutoTRequest_F: OFF
#C #goto CHECK_TRA_Cmd
#C #endif
#C ********************************************************
#C * Check for a test mode revision request
#C ********************************************************
EidleStillSet:	OFF
#C #if (AutoPL_I & ~LastAUTOPLReq & ~AutoThrottle_F)
#C * P/L toggle request just made with auto throttle not engaged
#C #goto CHECK_TRA_Cmd
#C #elseif (AutoPL_I & ~LastAUTOPLReq & AutoThrottle_F)
#C * P/L toggle request just made with auto throttle engaged
#C dummy: storeevent("Test Mode Revision to Manual")
#C AutoPLEnable_O: OFF
#C AutoThrottle_F: OFF
#C AutoThrottleEngaged: OFF
#C PLA_DAC_Tmr_F: ON
#C DAC_PLA_Voltage: 0.0
#C #goto NO_CHECK_TRA
#C #else
#C #goto NO_CHECK_TRA
#C #endif
#C *
CHECK_TRA_Cmd	
#C ********************************************************
#C * Check for Emergancy Idle
#C ********************************************************
#C *#if (FCSEmrgIdle2_I)
#C * EidleStillSet 1
#C * #goto NO_CHECK_TRA
#C *#endif
#C *
#C * Check if TRA Target is defined
#C * Set Target to current value...
#C * Set the Targets in SetTargs_ATP. (DJR 12/11/19)...
#C #if ((ControlMode = EPRControlMode) & (EPR_Target = 0.0))
#C EPR_Target: EPR
#C #elseif ((ControlMode = N1ControlMode) & (N1_Target = 0.0))
#C N1_Target: N1S
#C #elseif ((ControlMode = TRAControlMode) & (TRA_Cmd = 0.0))
#C TRA_Cmd:Deg	TRA_Actual
#C #endif
#C *
#C * Perform TRA Target Lookup
#C * Sets the Initial TRA_Cmd
#C *
#C #if (ControlMode = EPRControlMode)
#C TRA_Cmd:Deg	lookup (EPRControl_T)
#C #elseif (ControlMode = N1ControlMode)
#C TRA_Cmd:Deg	lookup (N1Control_T)
#C #elseif (ControlMode = TRAControlMode)
#C TRA_Cmd:Deg	lookup (TRAControl_T)
#C TRA_Cmd:Deg	TRA_Actual
TRA_Cmd:Deg	TRA_Actual
#C #elseif
#C TRA_Cmd:Deg	RMISS
#C BadControlMode ON
#C #endif
#C *****************************************************
#C #if	(TRA_Diff > TRA_Diff_Limit)
#C TRA_Diff_Msg:	ON
#C #elseif	((TRA_Cmd > TRAMxPwrStop) | (TRA_Cmd < TRAMnIdleStop))
#C BadTRAMsg:	ON
#C #else	
#C dummy:	storeevent("Test Mode Revision to Auto")
#C PLA_Command:VDC	(TLA_PLA_mcoeff * TRA_Actual + TLA_PLA_bcoeff)
#C DAC_PLA_Voltage:	-(DACSlope * PLA_Handle + DACOffset)
#C PLA_DAC_Tmr_F:	ON
#C AutoThrottleEngaged: ON
#C #endif	
#C *****************************************************
NO_CHECK_TRA	
#C ********************************************************
#C * Check for timer to start or stop auto throttle
#C ********************************************************
#C #if	~PLA_DAC_Tmr_F
#C #goto	NO_TIMER_CHECK
#C #endif	
#C *
#C #if	(AutoThrottleEngaged & (PLA_DAC_Tmr > 1.5))
#C AutoPLEnable_O: ON
#C PLA_DAC_Tmr_F:	OFF
#C PLA_DAC_Tmr:Sec	0.0
#C AutoThrottle_F: ON
#C #elseif	(~AutoThrottleEngaged & (PLA_DAC_Tmr > 1.0))
#C AutoPLEnable_O:	OFF
#C PLA_DAC_Tmr_F:	OFF
#C PLA_DAC_Tmr:Sec	0.0
#C #endif	
#C ********************************************************
NO_TIMER_CHECK	
#C ********************************************************
#C * Check for control mode revision
#C ********************************************************
#if	(ControlMode = LastControlMode)
#goto	NO_CONTROL_CHANGE
#else	
ControlModeRevision:	storeevent("Control Mode Revision")
#endif	
#C ********************************************************
#C * Check for new operating point if in auto throttle
#C ********************************************************
#C #if ~AutoThrottle_F
#C #goto NEW_LIMITS
#C #endif
#C *
#C #if ((ControlMode = EPRControlMode) & (EPR_Target = 0.0))
#C BadOperatingPoint ON
#C #elseif ((ControlMode = N1ControlMode) & (N1_Target = 0.0))
#C BadOperatingPoint ON
#C #elseif ((ControlMode = TRAControlMode) & (TRA_Cmd = 0.0))
#C BadOperatingPoint ON
#C #endif
#C *
#C NEW_LIMITS
#C *
NO_CONTROL_CHANGE	
#C ******************************************************
#C * Check for operator override A difference of > X degrees
#C * between commanded and actual Power Lever Position
#C ********************************************************
#C #if (AutoThrottle_F & (TRA_Diff > TRA_OverRide))
#C OperatorOverride ON
#C #else
#C OperatorOverride OFF
#C #endif
#C ******************************************************
#C * Perform TRA Target Lookup and Add Trim Value...
#C ******************************************************
#C #if (ControlMode = EPRControlMode)
#C EPR_Target: (EPR_Target + (EPR_Target * Trim_Value / 100.0))
#C TRA_Cmd:Deg	lookup (EPRControl_T)
#C #elseif (ControlMode = N1ControlMode)
#C N1_Target: (N1_Target + (N1_Target * Trim_Value / 100.0))
#C TRA_Cmd:Deg	lookup (N1Control_T)
#C #elseif (ControlMode = TRAControlMode)
#C TRA_Cmd:Deg	(TRA_Cmd + (TRA_Cmd * Trim_Value / 100.0))
#C TRA_Cmd:Deg	lookup (TRAControl_T)
#C #else
#C TRA_Cmd:Deg	RMISS
#C #endif
#C ******************************************************
#C * If in Auto throttle mode Perform Conv
#C ******************************************************
#if	~AutoThrottle_F
#goto	NO_AUTO_THROTTLE
#endif	
#C ******************************************************
#C * Compute DAC value
#C ******************************************************
#C DAC_PLA_Voltage:	-(DACSlope * PLA_Handle + DACOffset)
#C *
NO_AUTO_THROTTLE	
#C *
#C #if	CalibratingDAC
#C PLALow:	((PLA1 + PLA2) / 2.0)
#C PLAHigh:	((PLA3 + PLA4) / 2.0)
#C DACSlope:	(2.0 / (PLAHigh - PLALow))
#C DACOffset:	(1.5 - (PLALow * DACSlope))
#C CalibratingDAC:	OFF
#C #endif	
#C vvvvvvvvvvvvvvvvvvvv Code Checked OK Below vvvvvvvvvvvvvvvvv
#C ------------------------------------------------------------
#C ************************************************************
#C * Set the actual Ramping TLA Voltage (PLA_Command) here...
#C ************************************************************
#if	(AutoThrottle_F & AutoPL_I)
PLA_Command:VDC	(TLA_PLA_mcoeff * TRA_Cmd + TLA_PLA_bcoeff)
#endif	
#C LastControlMode: ControlMode
LastAUTOPLReq:	AutoPL_I
TRACmdLastScan:Deg	TRA_Cmd
#C ------------------------------------------------------------
$END-GROUP
